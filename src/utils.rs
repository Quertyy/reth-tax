use reth::revm::db::{CacheDB, DatabaseRef};
use reth::primitives::{address, Address, U256, Bytes, keccak256};
use alloy_dyn_abi::{DynSolValue, DynSolType};
use alloy_sol_types::{SolCall, sol};

pub fn tax_checker_address() -> Address {
    address!("00000000000000000000000000000000F3370000")
}

// Holds constant value representing braindance caller
pub fn tax_checker_controller_address() -> Address {
    address!("000000000000000000000000000000000420BABE")
}

pub fn get_tax_checker_code() -> Bytes {
    "".parse().unwrap()
}

pub fn insert_fake_approval<ExtDB>(tokens: Vec<Address>, pair: Address, db: &mut CacheDB<ExtDB>)
where
    ExtDB: DatabaseRef,
    <ExtDB as DatabaseRef>::Error: std::fmt::Debug,
{
    for token in tokens.iter() {
        for i in 0..100 {
            let slot_new = map_location(U256::from(i), pair, tax_checker_address());
            let max_uint = U256::MAX;
            db.insert_account_storage(*token, slot_new, max_uint).unwrap();
        }
    }
}

pub fn map_location(slot: U256, key: Address, key_after: Address) -> U256 {
    let input = [DynSolValue::Address(key), DynSolValue::Uint(slot, 32)];
    let input = DynSolValue::Tuple(input.to_vec());
    let key_slot_hash: U256 = keccak256(input.abi_encode()).into();

    let input = [DynSolValue::Address(key_after), DynSolValue::Uint(key_slot_hash, 32)];
    let input = DynSolValue::Tuple(input.to_vec());
    let slot: U256 = keccak256(input.abi_encode()).into();
    slot
}

sol! {
    #[derive(Debug)]
    function getTax(
        address pair, 
        address tokenIn, 
        uint256 dexFee
    ) returns (uint256 buyTax, uint256 sellTax);
}

pub fn encode_call(token: Address, pair: Address) -> Vec<u8> {
    let call = getTaxCall {
        pair,
        tokenIn: token,
        dexFee: U256::from(997),
    };
    call.abi_encode()
}

pub fn decode_success_call(output: Bytes) -> (U256, U256) {
    let decoded = getTaxCall::abi_decode_returns(&output, true).unwrap();
    let buy_tax = decoded.buyTax;
    let sell_tax = decoded.sellTax;
    (buy_tax / U256::from(100), sell_tax / U256::from(100))
}